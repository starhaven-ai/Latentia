// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id           String    @id @db.Uuid
  username     String?   @unique
  displayName  String?   @map("display_name")
  avatarUrl    String?   @map("avatar_url")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  
  projects     Project[]
  generations  Generation[]
  projectMembers ProjectMember[]
  modelPins    UserModelPin[]
  workflows    Workflow[]

  @@map("profiles")
}

model Project {
  id             String   @id @default(uuid()) @db.Uuid
  name           String
  description    String?
  coverImageUrl  String?  @map("cover_image_url")
  ownerId        String   @map("owner_id") @db.Uuid
  isShared       Boolean  @default(false) @map("is_shared")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  
  owner          Profile  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  sessions       Session[]
  members        ProjectMember[]

  @@index([ownerId])
  @@map("projects")
}

model ProjectMember {
  id         String   @id @default(uuid()) @db.Uuid
  projectId  String   @map("project_id") @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  role       String   // 'viewer', 'editor', 'admin'
  joinedAt   DateTime @default(now()) @map("joined_at")
  
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@map("project_members")
}

model Session {
  id         String   @id @default(uuid()) @db.Uuid
  projectId  String   @map("project_id") @db.Uuid
  name       String
  type       String   // 'image' or 'video'
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  
  project      Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  generations  Generation[]

  @@index([projectId])
  @@map("sessions")
}

model Generation {
  id             String   @id @default(uuid()) @db.Uuid
  sessionId      String   @map("session_id") @db.Uuid
  userId         String   @map("user_id") @db.Uuid
  modelId        String   @map("model_id")
  prompt         String   @db.Text
  negativePrompt String?  @map("negative_prompt") @db.Text
  parameters     Json     // Flexible params per model
  status         String   // 'queued', 'processing', 'completed', 'failed'
  createdAt      DateTime @default(now()) @map("created_at")
  
  session    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user       Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)
  outputs    Output[]

  @@index([sessionId])
  @@index([userId])
  @@map("generations")
}

model Output {
  id           String   @id @default(uuid()) @db.Uuid
  generationId String   @map("generation_id") @db.Uuid
  fileUrl      String   @map("file_url")
  fileType     String   @map("file_type") // 'image' or 'video'
  width        Int?
  height       Int?
  duration     Float?   // For videos
  isStarred    Boolean  @default(false) @map("is_starred")
  createdAt    DateTime @default(now()) @map("created_at")
  
  generation Generation @relation(fields: [generationId], references: [id], onDelete: Cascade)

  @@index([generationId])
  @@map("outputs")
}

model Model {
  id        String   @id
  name      String
  provider  String
  type      String[] // ['image', 'video']
  config    Json     // Full model configuration
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  
  pins      UserModelPin[]

  @@map("models")
}

model UserModelPin {
  userId    String @map("user_id") @db.Uuid
  modelId   String @map("model_id")
  pinOrder  Int    @map("pin_order")
  
  user      Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  model     Model   @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@id([userId, modelId])
  @@index([userId])
  @@map("user_model_pins")
}

model Workflow {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  name         String
  description  String?
  isTemplate   Boolean  @default(false) @map("is_template")
  workflowData Json     @map("workflow_data") // Node graph structure
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  user         Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("workflows")
}

